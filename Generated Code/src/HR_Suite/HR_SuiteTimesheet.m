/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.1.3.358
*/ 

#import "HR_SuiteTimesheet.h"
#import "HR_SuiteTimesheetMetaData.h"
#import "SUPJsonObject.h"
#import "HR_SuiteHR_SuiteDB.h"
#import "SUPEntityDelegate.h"
#import "SUPEntityMetaDataRBS.h"
#import "SUPQuery.h"
#import "HR_SuiteKeyGenerator.h"
#import "HR_SuiteLocalKeyGenerator.h"
#import "HR_SuiteLogRecordImpl.h"

@implementation HR_SuiteTimesheet

@synthesize id_ = _id;
@synthesize date = _date;
@synthesize employeeID = _employeeID;
@synthesize job = _job;
@synthesize hours = _hours;
@synthesize signCode = _signCode;
@synthesize timestamp = _timestamp;
@synthesize day = _day;
@synthesize managerNotes = _managerNotes;
@synthesize updateSignCodeCalled = _updateSignCodeCalled;
@synthesize createByDayCalled = _createByDayCalled;
@synthesize surrogateKey = _surrogateKey;

- (int64_t)surrogateKey
{
    return _surrogateKey;
}

- (void)setId_:(int32_t)newId_
{
    if (newId_ != self->_id)
    {
        self->_id = newId_;
        self.isDirty = YES;
    }
}

- (void)setDate:(NSString*)newDate
{
    if (newDate != self->_date)
    {
		[self->_date release];
        self->_date = [newDate retain];
        self.isDirty = YES;
    }
}

- (void)setEmployeeID:(NSString*)newEmployeeID
{
    if (newEmployeeID != self->_employeeID)
    {
		[self->_employeeID release];
        self->_employeeID = [newEmployeeID retain];
        self.isDirty = YES;
    }
}

- (void)setJob:(NSString*)newJob
{
    if (newJob != self->_job)
    {
		[self->_job release];
        self->_job = [newJob retain];
        self.isDirty = YES;
    }
}

- (void)setHours:(NSNumber*)newHours
{
    if (newHours != self->_hours)
    {
		[self->_hours release];
        self->_hours = [newHours retain];
        self.isDirty = YES;
    }
}

- (void)setSignCode:(NSNumber*)newSignCode
{
    if (newSignCode != self->_signCode)
    {
		[self->_signCode release];
        self->_signCode = [newSignCode retain];
        self.isDirty = YES;
    }
}

- (void)setTimestamp:(NSString*)newTimestamp
{
    if (newTimestamp != self->_timestamp)
    {
		[self->_timestamp release];
        self->_timestamp = [newTimestamp retain];
        self.isDirty = YES;
    }
}

- (void)setDay:(NSString*)newDay
{
    if (newDay != self->_day)
    {
		[self->_day release];
        self->_day = [newDay retain];
        self.isDirty = YES;
    }
}

- (void)setManagerNotes:(NSString*)newManagerNotes
{
    if (newManagerNotes != self->_managerNotes)
    {
		[self->_managerNotes release];
        self->_managerNotes = [newManagerNotes retain];
        self.isDirty = YES;
    }
}

- (void)setUpdateSignCodeCalled:(BOOL)newUpdateSignCodeCalled
{
    if (newUpdateSignCodeCalled != self->_updateSignCodeCalled)
    {
        self->_updateSignCodeCalled = newUpdateSignCodeCalled;
        self.isDirty = YES;
    }
}

- (void)setCreateByDayCalled:(BOOL)newCreateByDayCalled
{
    if (newCreateByDayCalled != self->_createByDayCalled)
    {
        self->_createByDayCalled = newCreateByDayCalled;
        self.isDirty = YES;
    }
}

- (void)setSurrogateKey:(int64_t)newSurrogateKey
{
    if (newSurrogateKey != self->_surrogateKey)
    {
        self->_surrogateKey = newSurrogateKey;
        self.isNew = YES;
    }
}

static SUPEntityDelegate *g_HR_SuiteTimesheet_delegate = nil;

+ (SUPEntityDelegate *) delegate
{
	@synchronized(self) {
		if (g_HR_SuiteTimesheet_delegate == nil) {
			g_HR_SuiteTimesheet_delegate = [[SUPEntityDelegate alloc] initWithName:@"HR_SuiteTimesheet" clazz:[self class]
				metaData:[self metaData] dbDelegate:[HR_SuiteHR_SuiteDB delegate] database:[HR_SuiteHR_SuiteDB instance]];
		}
	}
	
	return [[g_HR_SuiteTimesheet_delegate retain] autorelease];
}

static SUPEntityMetaDataRBS* HR_SuiteTimesheet_META_DATA;

+ (SUPEntityMetaDataRBS*)metaData
{
    if (HR_SuiteTimesheet_META_DATA == nil) {
		HR_SuiteTimesheet_META_DATA = [[HR_SuiteTimesheetMetaData alloc] init];
	}
	
	return HR_SuiteTimesheet_META_DATA;
}

- (SUPClassMetaDataRBS*)getClassMetaData
{
    return [[self class] metaData];
}

- (void)clearRelationshipObjects
{
}

+ (NSObject<SUPCallbackHandler>*)callbackHandler
{
	return [[self delegate] callbackHandler];
}

+ (void)registerCallbackHandler:(NSObject<SUPCallbackHandler>*)newCallbackHandler
{
	[[self delegate] registerCallbackHandler:newCallbackHandler];
}
- (id) init
{
    if ((self = [super init]))
    {
        self.classMetaData = [HR_SuiteTimesheet metaData];
        [self setEntityDelegate:(SUPEntityDelegate*)[HR_SuiteTimesheet delegate]];
    }
    return self;    
}

- (void)dealloc
{
    if(_date)
    {
        [_date release];
        _date = nil;
    }
    if(_employeeID)
    {
        [_employeeID release];
        _employeeID = nil;
    }
    if(_job)
    {
        [_job release];
        _job = nil;
    }
    if(_hours)
    {
        [_hours release];
        _hours = nil;
    }
    if(_signCode)
    {
        [_signCode release];
        _signCode = nil;
    }
    if(_timestamp)
    {
        [_timestamp release];
        _timestamp = nil;
    }
    if(_day)
    {
        [_day release];
        _day = nil;
    }
    if(_managerNotes)
    {
        [_managerNotes release];
        _managerNotes = nil;
    }
	[super dealloc];
}




+ (HR_SuiteTimesheet*)find:(int64_t)id_
{
    SUPObjectList *keys = [SUPObjectList getInstance];
    [keys add:[NSNumber numberWithLong:id_]];
    return (HR_SuiteTimesheet*)[(SUPEntityDelegate*)([[self class] delegate]) findEntityWithKeys:keys];
}

+ (SUPObjectList*)findWithQuery:(SUPQuery*)query
{
    return (SUPObjectList*)[(SUPEntityDelegate*)([[self class] delegate])  findWithQuery:query:[HR_SuiteTimesheet class]];
}

- (int64_t)_pk
{
    return (int64_t)[[self i_pk] longValue];
}

+ (HR_SuiteTimesheet*)load:(int64_t)id_
{
    return (HR_SuiteTimesheet*)[(SUPEntityDelegate*)([[self class] delegate]) load:[NSNumber numberWithLong:id_]];
}

+ (HR_SuiteTimesheet*)getInstance
{
    HR_SuiteTimesheet* me = [[HR_SuiteTimesheet alloc] init];
    [me autorelease];
    return me;
}
- (SUPString)getLastOperation
{
    if (self.pendingChange == 'C')
    {
        return @"create";
    }
    else if (self.pendingChange == 'D')
    {
        return @"delete";
    }
    else if (self.pendingChange == 'U')
    {
        return @"update";
    }
    return @"";

}
+ (void)submitPendingOperations
{
    [[[self class] delegate] submitPendingOperations];
}

+ (void)cancelPendingOperations
{
    [[[self class] delegate] cancelPendingOperations];
}
- (HR_SuiteTimesheet*)getDownloadState
{
    return (HR_SuiteTimesheet*)[self i_getDownloadState];
}

- (HR_SuiteTimesheet*) getOriginalState
{
    return (HR_SuiteTimesheet*)[self i_getOriginalState];
}
- (SUPJsonObject*)getAttributeJson:(int)id_
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }

}
- (void)setAttributeJson:(int)id_:(SUPJsonObject*)value
{
    switch(id_)
    { 
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}

-(SUPLong) getAttributeLong:(int)id_
{
    switch(id_)
    {
    case 28:
        return self.surrogateKey;
    default:
         return [super getAttributeLong:id_];
    }
}

-(void) setAttributeLong:(int)id_:(SUPLong)v
{
    switch(id_)
    {
    case 28:
        self.surrogateKey = v;
        break;;
    default:
        [super setAttributeLong:id_:v];
        break;;
    }
}
-(SUPNullableInt) getAttributeNullableInt:(int)id_
{
    switch(id_)
    {
    case 23:
        return self.hours;
    case 24:
        return self.signCode;
    default:
         return [super getAttributeNullableInt:id_];
    }
}

-(void) setAttributeNullableInt:(int)id_:(SUPNullableInt)v
{
    switch(id_)
    {
    case 23:
        self.hours = v;
        break;;
    case 24:
        self.signCode = v;
        break;;
    default:
        [super setAttributeNullableInt:id_:v];
        break;;
    }
}
-(SUPString) getAttributeNullableString:(int)id_
{
    switch(id_)
    {
    case 20:
        return self.date;
    case 21:
        return self.employeeID;
    case 22:
        return self.job;
    case 25:
        return self.timestamp;
    case 26:
        return self.day;
    case 27:
        return self.managerNotes;
    default:
         return [super getAttributeNullableString:id_];
    }
}

-(void) setAttributeNullableString:(int)id_:(SUPString)v
{
    switch(id_)
    {
    case 20:
        self.date = v;
        break;;
    case 21:
        self.employeeID = v;
        break;;
    case 22:
        self.job = v;
        break;;
    case 25:
        self.timestamp = v;
        break;;
    case 26:
        self.day = v;
        break;;
    case 27:
        self.managerNotes = v;
        break;;
    default:
        [super setAttributeNullableString:id_:v];
        break;;
    }
}
-(SUPBoolean) getAttributeBoolean:(int)id_
{
    switch(id_)
    {
    case 29:
        return self.updateSignCodeCalled;
    case 30:
        return self.createByDayCalled;
    default:
         return [super getAttributeBoolean:id_];
    }
}

-(void) setAttributeBoolean:(int)id_:(SUPBoolean)v
{
    switch(id_)
    {
    case 29:
        self.updateSignCodeCalled = v;
        break;;
    case 30:
        self.createByDayCalled = v;
        break;;
    default:
        [super setAttributeBoolean:id_:v];
        break;;
    }
}
-(SUPInt) getAttributeInt:(int)id_
{
    switch(id_)
    {
    case 19:
        return self.id_;
    default:
         return [super getAttributeInt:id_];
    }
}

-(void) setAttributeInt:(int)id_:(SUPInt)v
{
    switch(id_)
    {
    case 19:
        self.id_ = v;
        break;;
    default:
        [super setAttributeInt:id_:v];
        break;;
    }
}
- (id)getAttributeLargeObject:(int)id_ loadFromDB:(BOOL)loadFromDB
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }
}
- (void)setAttributeLargeObject:(int)id_:(id)value
{
    switch(id_)
    {
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}
- (SUPObjectList*)getLogRecords
{
   return [HR_SuiteLogRecordImpl findByEntity:@"Timesheet":[self keyToString]];
}




- (NSString*)toString
{
	NSString* str = [NSString stringWithFormat:@"\
	Timesheet = \n\
	    id = %i,\n\
	    date = %@,\n\
	    employeeID = %@,\n\
	    job = %@,\n\
	    hours = %@,\n\
	    signCode = %@,\n\
	    timestamp = %@,\n\
	    day = %@,\n\
	    managerNotes = %@,\n\
	    updateSignCodeCalled = %i,\n\
	    createByDayCalled = %i,\n\
	    pending = %i,\n\
	    pendingChange = %c,\n\
	    replayPending = %qi,\n\
	    replayFailure = %qi,\n\
	    surrogateKey = %qi,\n\
	    replayCounter = %qi,\n\
	    disableSubmit = %i,\n\
	    isNew = %i,\n\
        isDirty = %i,\n\
        isDeleted = %i,\n\
	\n"
    	,self.id_
    	,self.date
    	,self.employeeID
    	,self.job
    	,self.hours
    	,self.signCode
    	,self.timestamp
    	,self.day
    	,self.managerNotes
    	,self.updateSignCodeCalled
    	,self.createByDayCalled
    	,self.pending
    	,self.pendingChange
    	,self.replayPending
    	,self.replayFailure
    	,self.surrogateKey
    	,self.replayCounter
    	,self.disableSubmit
		,self.isNew
		,self.isDirty
		,self.isDeleted
	];
	return str;

}

- (NSString*)description
{
	return [self toString];
}
+ (SUPObjectList*)getPendingObjects
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects];
}

+ (SUPObjectList*)getPendingObjects:(int32_t)skip take:(int32_t)take
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects:skip:take];
}


/*!
  @method
  @abstract Generated instance method of type UPDATE
  @throws SUPPersistenceException
 */
- (void)updateSignCode
{
    self.isDirty = YES;
    self.updateSignCodeCalled = NO;
    self.createByDayCalled = NO;
    self.updateSignCodeCalled = YES;
    [self update];
}

/*!
  @method
  @abstract Generated instance method of type CREATE
  @throws SUPPersistenceException
 */
- (void)createByDay
{
    self.isDirty = YES;
    self.updateSignCodeCalled = NO;
    self.createByDayCalled = NO;
    self.createByDayCalled = YES;
    [self create];
}



+ (SUPObjectList*)findAll
{
	return [self findAll:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findAll:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:319] autorelease];
	[_selectSQL appendString:@" x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"l\",x.\"m\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"j\",x.\"_rc\",x.\"_ds\" FROM \"hr_suite_1_0_timesheet\" x where (((x.\"_pf\" = 1 or not exists (select x_os.\"j\" from \"hr_suite_1_0_timesheet_os\" x_os where x_os.\"j\" = x.\"j\"))))"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	SUPObjectList* values = [SUPObjectList getInstance];
	return (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[HR_SuiteTimesheet class]];
}



+ (HR_SuiteTimesheet*)findByPrimaryKey:(int32_t)id_
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:353] autorelease];
	[_selectSQL appendString:@"SELECT x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"l\",x.\"m\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"j\",x.\"_rc\",x.\"_ds\" FROM \"hr_suite_1_0_timesheet\" x WHERE (((x.\"_pf\" = 1 or not exists (select x_os.\"j\" from \"hr_suite_1_0_timesheet_os\" x_os where x_os.\"j\" = x.\"j"
	                               "\")))) and ( x.\"a\" = ?)"];
	sql = [[NSMutableString alloc] initWithFormat:@"%@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"int"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:[NSNumber numberWithInt:id_]];
	
	SUPObjectList* res = (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withClass:[HR_SuiteTimesheet class]];
	if(res && ([res size] > 0))
	{   
		HR_SuiteTimesheet* cus = (HR_SuiteTimesheet*)[res item:0];
	    return cus;
	}
	else
	    return nil;
}



+ (SUPObjectList*)findStatsFromDay:(NSString*)employeeID withDate:(NSString*)date withDay:(NSString*)day
{
	return [self findStatsFromDay:employeeID withDate:date withDay:day skip:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findStatsFromDay:(NSString*)employeeID withDate:(NSString*)date withDay:(NSString*)day skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:379] autorelease];
	[_selectSQL appendString:@" x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"l\",x.\"m\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"j\",x.\"_rc\",x.\"_ds\" FROM \"hr_suite_1_0_timesheet\" x WHERE (((x.\"_pf\" = 1 or not exists (select x_os.\"j\" from \"hr_suite_1_0_timesheet_os\" x_os where x_os.\"j\" = x.\"j\")))) "
	                               "and ( x.\"c\" = ? AND x.\"b\" = ? AND x.\"h\" = ?)"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string?"]];
	[dts addObject:[SUPDataType forName:@"string?"]];
	[dts addObject:[SUPDataType forName:@"string?"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:employeeID];
	[values addObject:date];
	[values addObject:day];
	return (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[HR_SuiteTimesheet class]];
}



+ (SUPObjectList*)findByEmployeeIDandDate:(NSString*)employeeID withDate:(NSString*)date
{
	return [self findByEmployeeIDandDate:employeeID withDate:date skip:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findByEmployeeIDandDate:(NSString*)employeeID withDate:(NSString*)date skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:363] autorelease];
	[_selectSQL appendString:@" x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"l\",x.\"m\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"j\",x.\"_rc\",x.\"_ds\" FROM \"hr_suite_1_0_timesheet\" x WHERE (((x.\"_pf\" = 1 or not exists (select x_os.\"j\" from \"hr_suite_1_0_timesheet_os\" x_os where x_os.\"j\" = x.\"j\")))) "
	                               "and ( x.\"c\" = ? AND x.\"b\" = ?)"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string?"]];
	[dts addObject:[SUPDataType forName:@"string?"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:employeeID];
	[values addObject:date];
	return (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[HR_SuiteTimesheet class]];
}



+ (SUPObjectList*)findByEmployeeAndSubmission:(NSString*)employeeID withSignCode:(NSNumber*)signCode
{
	return [self findByEmployeeAndSubmission:employeeID withSignCode:signCode skip:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findByEmployeeAndSubmission:(NSString*)employeeID withSignCode:(NSNumber*)signCode skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:363] autorelease];
	[_selectSQL appendString:@" x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"l\",x.\"m\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"j\",x.\"_rc\",x.\"_ds\" FROM \"hr_suite_1_0_timesheet\" x WHERE (((x.\"_pf\" = 1 or not exists (select x_os.\"j\" from \"hr_suite_1_0_timesheet_os\" x_os where x_os.\"j\" = x.\"j\")))) "
	                               "and ( x.\"c\" = ? AND x.\"f\" = ?)"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string?"]];
	[dts addObject:[SUPDataType forName:@"int?"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:employeeID];
	[values addObject:signCode];
	return (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[HR_SuiteTimesheet class]];
}

/*!
  @method
  @abstract Generated class method 
  @param query
  @throws SUPPersistenceException
 */
+ (int32_t)getSize:(SUPQuery*)query
{
    return [(SUPEntityDelegate*)([[self class] delegate]) getSize:query];
}

@end