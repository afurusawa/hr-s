/*
 Generated by Sybase Unwired Platform 
 Compiler version - 2.1.3.358
*/ 

#import "HR_SuiteLeaveRequests.h"
#import "HR_SuiteLeaveRequestsMetaData.h"
#import "SUPJsonObject.h"
#import "HR_SuiteHR_SuiteDB.h"
#import "SUPEntityDelegate.h"
#import "SUPEntityMetaDataRBS.h"
#import "SUPQuery.h"
#import "HR_SuiteKeyGenerator.h"
#import "HR_SuiteLocalKeyGenerator.h"
#import "HR_SuiteLogRecordImpl.h"

@implementation HR_SuiteLeaveRequests

@synthesize id_ = _id;
@synthesize employeeID = _employeeID;
@synthesize leaveType = _leaveType;
@synthesize startDate = _startDate;
@synthesize endDate = _endDate;
@synthesize reason = _reason;
@synthesize signCode = _signCode;
@synthesize timestamp = _timestamp;
@synthesize managerNotes = _managerNotes;
@synthesize surrogateKey = _surrogateKey;

- (int64_t)surrogateKey
{
    return _surrogateKey;
}

- (void)setId_:(int32_t)newId_
{
    if (newId_ != self->_id)
    {
        self->_id = newId_;
        self.isDirty = YES;
    }
}

- (void)setEmployeeID:(NSString*)newEmployeeID
{
    if (newEmployeeID != self->_employeeID)
    {
		[self->_employeeID release];
        self->_employeeID = [newEmployeeID retain];
        self.isDirty = YES;
    }
}

- (void)setLeaveType:(NSString*)newLeaveType
{
    if (newLeaveType != self->_leaveType)
    {
		[self->_leaveType release];
        self->_leaveType = [newLeaveType retain];
        self.isDirty = YES;
    }
}

- (void)setStartDate:(NSString*)newStartDate
{
    if (newStartDate != self->_startDate)
    {
		[self->_startDate release];
        self->_startDate = [newStartDate retain];
        self.isDirty = YES;
    }
}

- (void)setEndDate:(NSString*)newEndDate
{
    if (newEndDate != self->_endDate)
    {
		[self->_endDate release];
        self->_endDate = [newEndDate retain];
        self.isDirty = YES;
    }
}

- (void)setReason:(NSString*)newReason
{
    if (newReason != self->_reason)
    {
		[self->_reason release];
        self->_reason = [newReason retain];
        self.isDirty = YES;
    }
}

- (void)setSignCode:(NSNumber*)newSignCode
{
    if (newSignCode != self->_signCode)
    {
		[self->_signCode release];
        self->_signCode = [newSignCode retain];
        self.isDirty = YES;
    }
}

- (void)setTimestamp:(NSString*)newTimestamp
{
    if (newTimestamp != self->_timestamp)
    {
		[self->_timestamp release];
        self->_timestamp = [newTimestamp retain];
        self.isDirty = YES;
    }
}

- (void)setManagerNotes:(NSString*)newManagerNotes
{
    if (newManagerNotes != self->_managerNotes)
    {
		[self->_managerNotes release];
        self->_managerNotes = [newManagerNotes retain];
        self.isDirty = YES;
    }
}

- (void)setSurrogateKey:(int64_t)newSurrogateKey
{
    if (newSurrogateKey != self->_surrogateKey)
    {
        self->_surrogateKey = newSurrogateKey;
        self.isNew = YES;
    }
}

static SUPEntityDelegate *g_HR_SuiteLeaveRequests_delegate = nil;

+ (SUPEntityDelegate *) delegate
{
	@synchronized(self) {
		if (g_HR_SuiteLeaveRequests_delegate == nil) {
			g_HR_SuiteLeaveRequests_delegate = [[SUPEntityDelegate alloc] initWithName:@"HR_SuiteLeaveRequests" clazz:[self class]
				metaData:[self metaData] dbDelegate:[HR_SuiteHR_SuiteDB delegate] database:[HR_SuiteHR_SuiteDB instance]];
		}
	}
	
	return [[g_HR_SuiteLeaveRequests_delegate retain] autorelease];
}

static SUPEntityMetaDataRBS* HR_SuiteLeaveRequests_META_DATA;

+ (SUPEntityMetaDataRBS*)metaData
{
    if (HR_SuiteLeaveRequests_META_DATA == nil) {
		HR_SuiteLeaveRequests_META_DATA = [[HR_SuiteLeaveRequestsMetaData alloc] init];
	}
	
	return HR_SuiteLeaveRequests_META_DATA;
}

- (SUPClassMetaDataRBS*)getClassMetaData
{
    return [[self class] metaData];
}

- (void)clearRelationshipObjects
{
}

+ (NSObject<SUPCallbackHandler>*)callbackHandler
{
	return [[self delegate] callbackHandler];
}

+ (void)registerCallbackHandler:(NSObject<SUPCallbackHandler>*)newCallbackHandler
{
	[[self delegate] registerCallbackHandler:newCallbackHandler];
}
- (id) init
{
    if ((self = [super init]))
    {
        self.classMetaData = [HR_SuiteLeaveRequests metaData];
        [self setEntityDelegate:(SUPEntityDelegate*)[HR_SuiteLeaveRequests delegate]];
    }
    return self;    
}

- (void)dealloc
{
    if(_employeeID)
    {
        [_employeeID release];
        _employeeID = nil;
    }
    if(_leaveType)
    {
        [_leaveType release];
        _leaveType = nil;
    }
    if(_startDate)
    {
        [_startDate release];
        _startDate = nil;
    }
    if(_endDate)
    {
        [_endDate release];
        _endDate = nil;
    }
    if(_reason)
    {
        [_reason release];
        _reason = nil;
    }
    if(_signCode)
    {
        [_signCode release];
        _signCode = nil;
    }
    if(_timestamp)
    {
        [_timestamp release];
        _timestamp = nil;
    }
    if(_managerNotes)
    {
        [_managerNotes release];
        _managerNotes = nil;
    }
	[super dealloc];
}




+ (HR_SuiteLeaveRequests*)find:(int64_t)id_
{
    SUPObjectList *keys = [SUPObjectList getInstance];
    [keys add:[NSNumber numberWithLong:id_]];
    return (HR_SuiteLeaveRequests*)[(SUPEntityDelegate*)([[self class] delegate]) findEntityWithKeys:keys];
}

+ (SUPObjectList*)findWithQuery:(SUPQuery*)query
{
    return (SUPObjectList*)[(SUPEntityDelegate*)([[self class] delegate])  findWithQuery:query:[HR_SuiteLeaveRequests class]];
}

- (int64_t)_pk
{
    return (int64_t)[[self i_pk] longValue];
}

+ (HR_SuiteLeaveRequests*)load:(int64_t)id_
{
    return (HR_SuiteLeaveRequests*)[(SUPEntityDelegate*)([[self class] delegate]) load:[NSNumber numberWithLong:id_]];
}

+ (HR_SuiteLeaveRequests*)getInstance
{
    HR_SuiteLeaveRequests* me = [[HR_SuiteLeaveRequests alloc] init];
    [me autorelease];
    return me;
}
- (SUPString)getLastOperation
{
    if (self.pendingChange == 'C')
    {
        return @"create";
    }
    else if (self.pendingChange == 'D')
    {
        return @"delete";
    }
    else if (self.pendingChange == 'U')
    {
        return @"update";
    }
    return @"";

}
+ (void)submitPendingOperations
{
    [[[self class] delegate] submitPendingOperations];
}

+ (void)cancelPendingOperations
{
    [[[self class] delegate] cancelPendingOperations];
}
- (HR_SuiteLeaveRequests*)getDownloadState
{
    return (HR_SuiteLeaveRequests*)[self i_getDownloadState];
}

- (HR_SuiteLeaveRequests*) getOriginalState
{
    return (HR_SuiteLeaveRequests*)[self i_getOriginalState];
}
- (SUPJsonObject*)getAttributeJson:(int)id_
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }

}
- (void)setAttributeJson:(int)id_:(SUPJsonObject*)value
{
    switch(id_)
    { 
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}

-(SUPLong) getAttributeLong:(int)id_
{
    switch(id_)
    {
    case 18:
        return self.surrogateKey;
    default:
         return [super getAttributeLong:id_];
    }
}

-(void) setAttributeLong:(int)id_:(SUPLong)v
{
    switch(id_)
    {
    case 18:
        self.surrogateKey = v;
        break;;
    default:
        [super setAttributeLong:id_:v];
        break;;
    }
}
-(SUPNullableInt) getAttributeNullableInt:(int)id_
{
    switch(id_)
    {
    case 15:
        return self.signCode;
    default:
         return [super getAttributeNullableInt:id_];
    }
}

-(void) setAttributeNullableInt:(int)id_:(SUPNullableInt)v
{
    switch(id_)
    {
    case 15:
        self.signCode = v;
        break;;
    default:
        [super setAttributeNullableInt:id_:v];
        break;;
    }
}
-(SUPString) getAttributeNullableString:(int)id_
{
    switch(id_)
    {
    case 10:
        return self.employeeID;
    case 11:
        return self.leaveType;
    case 12:
        return self.startDate;
    case 13:
        return self.endDate;
    case 14:
        return self.reason;
    case 16:
        return self.timestamp;
    case 17:
        return self.managerNotes;
    default:
         return [super getAttributeNullableString:id_];
    }
}

-(void) setAttributeNullableString:(int)id_:(SUPString)v
{
    switch(id_)
    {
    case 10:
        self.employeeID = v;
        break;;
    case 11:
        self.leaveType = v;
        break;;
    case 12:
        self.startDate = v;
        break;;
    case 13:
        self.endDate = v;
        break;;
    case 14:
        self.reason = v;
        break;;
    case 16:
        self.timestamp = v;
        break;;
    case 17:
        self.managerNotes = v;
        break;;
    default:
        [super setAttributeNullableString:id_:v];
        break;;
    }
}
-(SUPInt) getAttributeInt:(int)id_
{
    switch(id_)
    {
    case 9:
        return self.id_;
    default:
         return [super getAttributeInt:id_];
    }
}

-(void) setAttributeInt:(int)id_:(SUPInt)v
{
    switch(id_)
    {
    case 9:
        self.id_ = v;
        break;;
    default:
        [super setAttributeInt:id_:v];
        break;;
    }
}
- (id)getAttributeLargeObject:(int)id_ loadFromDB:(BOOL)loadFromDB
{
    switch(id_)
    {
        default:
        return [super getAttributeJson:id_];
    }
}
- (void)setAttributeLargeObject:(int)id_:(id)value
{
    switch(id_)
    {
        default:
            [super setAttributeJson:id_:value];
            break;
    }

}
- (SUPObjectList*)getLogRecords
{
   return [HR_SuiteLogRecordImpl findByEntity:@"LeaveRequests":[self keyToString]];
}




- (NSString*)toString
{
	NSString* str = [NSString stringWithFormat:@"\
	LeaveRequests = \n\
	    id = %i,\n\
	    employeeID = %@,\n\
	    leaveType = %@,\n\
	    startDate = %@,\n\
	    endDate = %@,\n\
	    reason = %@,\n\
	    signCode = %@,\n\
	    timestamp = %@,\n\
	    managerNotes = %@,\n\
	    pending = %i,\n\
	    pendingChange = %c,\n\
	    replayPending = %qi,\n\
	    replayFailure = %qi,\n\
	    surrogateKey = %qi,\n\
	    replayCounter = %qi,\n\
	    disableSubmit = %i,\n\
	    isNew = %i,\n\
        isDirty = %i,\n\
        isDeleted = %i,\n\
	\n"
    	,self.id_
    	,self.employeeID
    	,self.leaveType
    	,self.startDate
    	,self.endDate
    	,self.reason
    	,self.signCode
    	,self.timestamp
    	,self.managerNotes
    	,self.pending
    	,self.pendingChange
    	,self.replayPending
    	,self.replayFailure
    	,self.surrogateKey
    	,self.replayCounter
    	,self.disableSubmit
		,self.isNew
		,self.isDirty
		,self.isDeleted
	];
	return str;

}

- (NSString*)description
{
	return [self toString];
}
+ (SUPObjectList*)getPendingObjects
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects];
}

+ (SUPObjectList*)getPendingObjects:(int32_t)skip take:(int32_t)take
{
    return (SUPObjectList*)[(SUPEntityDelegate*)[[self class] delegate] getPendingObjects:skip:take];
}


/*!
  @method
  @abstract Generated instance method of type UPDATE
  @throws SUPPersistenceException
 */
- (void)updateSignCode
{
    self.isDirty = YES;
    [self update];
}



+ (SUPObjectList*)findAll
{
	return [self findAll:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findAll:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:311] autorelease];
	[_selectSQL appendString:@" x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"j\",x.\"_rc\",x.\"_ds\" FROM \"hr_suite_1_0_leaverequests\" x where (((x.\"_pf\" = 1 or not exists (select x_os.\"j\" from \"hr_suite_1_0_leaverequests_os\" x_os where x_os.\"j\" = x.\"j\"))))"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	SUPObjectList* values = [SUPObjectList getInstance];
	return (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[HR_SuiteLeaveRequests class]];
}



+ (HR_SuiteLeaveRequests*)findByPrimaryKey:(int32_t)id_
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:345] autorelease];
	[_selectSQL appendString:@"SELECT x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"j\",x.\"_rc\",x.\"_ds\" FROM \"hr_suite_1_0_leaverequests\" x WHERE (((x.\"_pf\" = 1 or not exists (select x_os.\"j\" from \"hr_suite_1_0_leaverequests_os\" x_os where x_os.\"j\" = x.\"j\")))"
	                               ") and ( x.\"a\" = ?)"];
	sql = [[NSMutableString alloc] initWithFormat:@"%@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"int"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:[NSNumber numberWithInt:id_]];
	
	SUPObjectList* res = (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withClass:[HR_SuiteLeaveRequests class]];
	if(res && ([res size] > 0))
	{   
		HR_SuiteLeaveRequests* cus = (HR_SuiteLeaveRequests*)[res item:0];
	    return cus;
	}
	else
	    return nil;
}



+ (SUPObjectList*)findRequestEntry:(NSString*)employeeID withStartDate:(NSString*)startDate withEndDate:(NSString*)endDate
{
	return [self findRequestEntry:employeeID withStartDate:startDate withEndDate:endDate skip:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findRequestEntry:(NSString*)employeeID withStartDate:(NSString*)startDate withEndDate:(NSString*)endDate skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:371] autorelease];
	[_selectSQL appendString:@" x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"j\",x.\"_rc\",x.\"_ds\" FROM \"hr_suite_1_0_leaverequests\" x WHERE (((x.\"_pf\" = 1 or not exists (select x_os.\"j\" from \"hr_suite_1_0_leaverequests_os\" x_os where x_os.\"j\" = x.\"j\")))) and "
	                               "( x.\"b\" = ? AND x.\"d\" = ? AND x.\"e\" = ?)"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string?"]];
	[dts addObject:[SUPDataType forName:@"string?"]];
	[dts addObject:[SUPDataType forName:@"string?"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:employeeID];
	[values addObject:startDate];
	[values addObject:endDate];
	return (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[HR_SuiteLeaveRequests class]];
}



+ (SUPObjectList*)findByEmployeeIDAndSubmission:(NSString*)employeeID withSignCode:(NSNumber*)signCode
{
	return [self findByEmployeeIDAndSubmission:employeeID withSignCode:signCode skip:0 take:INT_MAX]; 
}


	

+ (SUPObjectList*)findByEmployeeIDAndSubmission:(NSString*)employeeID withSignCode:(NSNumber*)signCode skip:(int32_t)skip take:(int32_t)take
{
	NSMutableString *sql = nil;
	NSMutableString *_selectSQL = nil;
	_selectSQL = [[[NSMutableString alloc] initWithCapacity:355] autorelease];
	[_selectSQL appendString:@" x.\"a\",x.\"b\",x.\"c\",x.\"d\",x.\"e\",x.\"f\",x.\"g\",x.\"h\",x.\"i\",x.\"_pf\",x.\"_pc\",x.\"_rp\",x.\"_rf\",x.\"j\",x.\"_rc\",x.\"_ds\" FROM \"hr_suite_1_0_leaverequests\" x WHERE (((x.\"_pf\" = 1 or not exists (select x_os.\"j\" from \"hr_suite_1_0_leaverequests_os\" x_os where x_os.\"j\" = x.\"j\")))) and "
	                               "( x.\"b\" = ? AND x.\"g\" = ?)"];
	sql = [[NSMutableString alloc] initWithFormat:@"select %@", _selectSQL];
	[sql autorelease];
	SUPStringList *ids = [SUPStringList listWithCapacity:0];
	SUPObjectList *dts = [SUPObjectList getInstance];
	[dts addObject:[SUPDataType forName:@"string?"]];
	[dts addObject:[SUPDataType forName:@"int?"]];
	SUPObjectList* values = [SUPObjectList getInstance];
	[values addObject:employeeID];
	[values addObject:signCode];
	return (SUPObjectList*)[[[self class] delegate] findWithSQL:sql withDataTypes:dts withValues:values withIDs:ids withSkip:skip withTake:take withClass:[HR_SuiteLeaveRequests class]];
}

/*!
  @method
  @abstract Generated class method 
  @param query
  @throws SUPPersistenceException
 */
+ (int32_t)getSize:(SUPQuery*)query
{
    return [(SUPEntityDelegate*)([[self class] delegate]) getSize:query];
}

@end